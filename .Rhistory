getwd()
library(devtools)
document()
hello()
install()
library(bis620)
bis620::hello()
library(usethis)
use_roxygen_md()
ls()
library(devtools)
document()
install()
library(bis620)
hello()
bis620:::hello()
document()
library(devtools)
document()
hello()
document()
?hello
document9)
document()
document()
?hello
library(devtools)
document()
document()
?hello
library(usethis)
use_testthat()
use_test()
document()
test()
document()
hello()
hello(verbose = TRUE)
a <- hello()
a
a <- hello(verbose = TRUE)
a
a <- hello(verbose = FALSE)
a
document()
hello(verbse = TRUE)
hello(verbose = TRUE)
document()
hello(verbose = TRUE)
hello(verbose = FALSE)
a <- hello(verbose = FALSE)
document()
hello(verbose = FALSE)
hello(verbose = TRUE)
hello(verbose = FALSE)
document()
hello(verbose = FALSE)
greeting <- hello(verbose = FALSE)
greeting
library(devtools)
library(usethis)
se_github_action_check_standard()
q()
library(palmerpenguins)
data(penguins)
data(penguins)
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
penguins
fit
fit
fit <- lm(bill_length_mm ~ bill_depth_mm, data = penguins)
fit
cat("you are here.\n")
print(letters)
````
packageVersion("devtools")
R-CMD-check
se_github_action_check_standard()
library(covr)
library(devtools)
use_test()
#' @title Convert Fahrenheit to Celsius
#' @description This function will convert a temperature from Fahrenheit to Celsius
#' @param temp_F a temperature in Fahrenheit
#' @return temperature in Celsius
fahrenheit_to_celsius <- function(temp_F) {
temp_C <- (temp_F - 32) * 5 / 9
return(temp_C)
}
#' @title Convert Celsius to Kelvin
#' @description This function will convert a temperature from Celsius to Kelvin
#' @param temp_C a temperature in Celsius
#' @return temperature in Kelvin
celsius_to_kelvin <- function(temp_C) {
temp_K <- temp_C + 273.15
return(temp_K)
}
check()
check()
check()
library(devtools)
check()
install.packages(forceps)
install.packages("forceps")
install.packages("variate)
)
install.packages("Rmpfr)
install.packages("Rmpfr")
install.packages("variate
)
install.packages("variate")
install.packages("variate")
library(devtools)
check()
knitr::opts_chunk$set(echo = TRUE)
library(forceps)
check()
document()
install_github("kaneplusplus/forceps")
install_github("kaneplusplus/variate")
library(devtools)
check()
install.packages("DT")
check()
document()
install.packages("reticulate")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
document()
library(devtools)
document()
document()
rm(list = c("celsius_to_kelvin", "fahrenheit_to_celsius"))
document()
check()
document()
library(forceps)
library(dplyr)
library(haven)
library(tibble)
library(purrr)
library(tidyr)
library(listdown)
library(variate)
library(gtsummary)
library(patchwork)
library(ggplot2)
library(plotly)
library(ggpubr)
library(forcats)
library(bis620)
document()
library(forceps)
library(dplyr)
library(haven)
library(tibble)
library(purrr)
library(tidyr)
library(listdown)
library(variate)
library(gtsummary)
library(patchwork)
library(ggplot2)
library(plotly)
library(ggpubr)
library(forcats)
library(bis620)
data(Demo)
demo <- Demo
data(Respeval)
respeval <- Respeval
data(Ae)
ae <- Ae
if (!require(reticulate)) {
install.packages("reticulate")
}
library(reticulate)
# Install miniconda.
install_miniconda()
# Install a newer version.
conda_install(python_version = "3.8",
envname="bis620",
packages = c("numpy", "pandas", "seaborn",
"plotnine", "statsmodels"))
use_condaenv("bis620", required = TRUE)
# List the available conda environments.
conda_list()
# See your current setup.
py_config()
document()
document()
document()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
py_install("numpy")
np <- import("numpy", convert = FALSE)
setOldClass("numpy.ndarray")
bis620_pymatrix <- setClass(Class = "bis620_pymatrix",
representation = representation(pymat = "numpy.ndarray"))
# `+` for bis620 numpy matrix plus bis620 numpy matrix
setMethod(
"+",
c(e1="bis620_pymatrix",e2="bis620_pymatrix"),
function(e1, e2) {
np$add(e1@pymat,e2@pymat)
}
)
# `+` for bis620 numpy matrix plus regular matrix
setMethod(
"+",
c(e1="bis620_pymatrix",e2="matrix"),
function(e1, e2) {
e2_py <- r_to_py(e2)
np$add(e1@pymat,e2_py)
}
)
# `+` for dgeMatrix plus bis620 numpy matrix
setMethod(
"+",
c(e1="dgeMatrix",e2="bis620_pymatrix"),
function(e1, e2) {
e1_py <- r_to_py(as.matrix(e1))
np$add(e1_py,e2@pymat)
}
)
# `+` for bis620 numpy matrix plus dgCMatrix
setMethod(
"+",
c(e1="bis620_pymatrix",e2="dgCMatrix"),
function(e1, e2) {
e2_py <- r_to_py(as.matrix(e2))
np$add(e1@pymat,e2_py)
}
)
# `-` for bis620 numpy matrix plus bis620 numpy matrix
setMethod(
"-",
c(e1="bis620_pymatrix",e2="bis620_pymatrix"),
function(e1, e2) {
np$subtract(e1@pymat,e2@pymat)
}
)
# `-` for bis620 numpy matrix plus regular matrix
setMethod(
"-",
c(e1="bis620_pymatrix",e2="matrix"),
function(e1, e2) {
e2_py <- r_to_py(e2)
np$subtract(e1@pymat,e2_py)
}
)
# `-` for dgeMatrix plus bis620 numpy matrix
setMethod(
"-",
c(e1="dgeMatrix",e2="bis620_pymatrix"),
function(e1, e2) {
e1_py <- r_to_py(as.matrix(e1))
np$subtract(e1_py,e2@pymat)
}
)
# `-` for bis620 numpy matrix plus dgCMatrix
setMethod(
"-",
c(e1="bis620_pymatrix",e2="dgCMatrix"),
function(e1, e2) {
e2_py <- r_to_py(as.matrix(e2))
np$subtract(e1@pymat,e2_py)
}
)
conda update
libraray(reticulate)
librray(reticulate)
library(reticulate)
